====================
PyClarify quickstart
====================

.. currentmodule:: pyclarify

.. code-block:: python

   >>> import pyclarify

Prerequisites
=============

You'll need to know a bit of Python. For a refresher, see the `Python
tutorial <https://docs.python.org/tutorial/>`__.

You need your Clarify credentials. Click :ref:`here <getcredentials>` for how to find them.



Interact with Clarify
=====================
PyClarify provides a fast and easy way to write data into Clarify, create or update the signal metadata and get item data, by using the :py:meth:`~pyclarify.interface.ApiClient` class.

For information about the Clarify Developer documentation
click `here <https://docs.clarify.us/reference>`__.

Write data into Clarify
^^^^^^^^^^^^^^^^^^^^^^^

Step 1: Create a :py:meth:`~pyclarify.models.data.ClarifyDataFrame` model. 

Step 2: Use the  :py:meth:`~pyclarify.interface.ApiClient.insert` method which takes as an argoument the ClarifyDataFrame model.

An example
^^^^^^^^^^

.. code-block:: python

    >>> from pyclarify.models.data import ClarifyDataFrame
    >>> from pyclarify.interface import ApiClient

    >>> client = ApiClient("./clarify-credentials.json")

    >>> data = ClarifyDataFrame(
    >>>     times=["2021-03-11T21:50:06Z", "2021-04-11T21:50:06Z"],
    >>>     series={"id1": [1, 2], "id2": [4, 5]},
    >>> )
    >>> response = client.insert(data=data)
    >>> print(response)


After that you should be able to see the newly creared signal in Clarify 

.. image:: signal_data.png
    :width: 1166px
    :height: 308px
    :scale: 50 %



Add signal metadata
===================

To add or update the signal's metadata, use the :py:meth:`~pyclarify.interface.ApiClient.save_signals` method. 


An example
^^^^^^^^^^

.. code-block:: python

    >>> from pyclarify.models.data import Signal
    >>> from pyclarify.interface import ApiClient

    >>> client = ApiClient("./clarify-credentials.json")
    
    >>> signal = Signal(
    >>>    name="id1",
    >>>    description="Clarify is awesome!",
    >>>     labels={"data-source": ["Office"], "location": ["Trondheim"]},
    >>> )
    >>> response = client.save_signals(inputs={"id1": signal}, created_only=False)
    >>> print(response)


.. image:: metadata.png
    :width: 374px
    :height: 687px
    :scale: 50 %

Get Item data  
=============

To get data of an item, you first must have an integration with reading access. 
Once the is a reading access for an integation, use the :py:meth:`~pyclarify.interface.ApiClient.select_items` method.
To do that, first create a :py:meth:`~pyclarify.models.requests.ItemSelect` model. This model uses three other models.
The :py:meth:`~pyclarify.models.requests.ParamsSelectItems`, :py:meth:`~pyclarify.models.requests.ParamsSelectTimes` and the :py:meth:`~pyclarify.models.requests.ParamsSelectSeries`. 
Once all the models are created, call the :py:meth:`~pyclarify.interface.ApiClient.select_items` method with the ItemSelect as an argument.


An example
^^^^^^^^^^

.. code-block:: python

    >>> from pyclarify.interface import ApiClient
    >>> from pyclarify.models.requests import (
    >>>         ItemSelect,
    >>>         ParamsSelectItems,
    >>>         ParamsSelectTimes,
    >>>         ParamsSelectSeries,
    >>> )

    >>> client = ApiClient("./clarify-credentials.json")

    >>> items = ParamsSelectItems(include=True, filter={"id": {"$in": ["id1"]}})
    >>> times = ParamsSelectTimes(
    >>>         notBefore="2021-03-10T21:50:06Z", before="2021-04-11T22:50:06Z"
    >>> )
    >>> series = ParamsSelectSeries(items=True)

    >>> params = ItemSelect(items=items, times=times, series=series)

    >>> response = client.select_items(params=params)
    >>> print(response)

